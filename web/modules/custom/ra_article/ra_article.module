<?php

use Drupal\Core\Entity\RevisionLogInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\ra_article\ArticleDetailFetchService;

/**
 * Implements hook_cron().
 *
 * Fetch the article detail.
 */
function ra_article_scrape_article_cron() {
  /** @var \Drupal\ra_article\ArticleDetailFetchService $articleDetailFetch */
  $articleDetailFetch = \Drupal::service('ra_article.article_detail_fetch');
  $articleNids = $articleDetailFetch->getArticleNidsToFetch();
  $articleDetailFetch->fetchArticleDetail($articleNids);
}

/**
 * Implements hook_cron().
 *
 * Fetch open article of a seller.
 */
function ra_article_scrape_seller_articles_cron() {
  /** @var \Drupal\ra_article\SellerArticlesServiceInterface $sellerArticleService */
  $sellerArticleService = \Drupal::service('ra_article.seller_articles');
  $sellerArticleService->fetchSellerArticles();
}

/**
 * Implements hook_cron().
 *
 * Fills thew queue with the open article pages.
 */
function ra_article_scrape_seller_articles_init_cron() {
  /** @var \Drupal\ra_article\SellerArticlesServiceInterface $sellerArticleService */
  $sellerArticleService = \Drupal::service('ra_article.seller_articles');
  $sellerArticleService->createSellerArticleQueue();
}

/**
 * Changes article status: to_scrape.
 */
function _change_article_status_cron(): void {
  $timestamp = strtotime('-3 days', time());
  $datetime = date('Y-m-d\Th:m:s', $timestamp);

  $database = \Drupal::database();
  $query = $database->select('node__field_article_end_date', 'ed');
  $query->fields('ed', ['entity_id'])
    ->condition('ed.field_article_end_date_value', $datetime, '<=')
    ->condition('cm.moderation_state', ArticleDetailFetchService::STATE_OPEN)
    ->range(0, 10)
    ->join('content_moderation_state_field_data', 'cm', 'ed.entity_id=cm.content_entity_id');

  $articleNids = $query->execute()->fetchAll();
  if (empty($articleNids)) {
    return;
  }

  foreach ($articleNids as $nid) {
    $article = Node::load($nid->entity_id);
    $article->set('moderation_state', ArticleDetailFetchService::STATE_TO_SCRAPE);
    if ($article instanceof RevisionLogInterface) {
      $article->setRevisionUserId(1);
      $article->setRevisionLogMessage('Changed to ' . ArticleDetailFetchService::STATE_TO_SCRAPE);
    }
    $article->setChangedTime(time());
    $article->save();
  }
}

/**
 * Determine if article was sold or not and create sale entities.
 */
function _process_article_status_cron() {
  $database = \Drupal::database();
  $query = $database->select('node_field_data', 'n');
  $query->fields('n', ['nid'])
    ->condition('n.type', 'article')
    ->condition('cm.moderation_state', ArticleDetailFetchService::STATE_TO_PROCESS)
    ->range(0, 500)
    ->join('content_moderation_state_field_data', 'cm', 'n.nid=cm.content_entity_id');

  $articleNids = $query->execute()->fetchAll();
  if (empty($articleNids)) {
    return;
  }

  foreach ($articleNids as $nid) {
    $article = Node::load($nid->nid);
    if (!$article instanceof NodeInterface) {
      \Drupal::logger('ra_article')->error('No entity in _process_article_status_cron');
      $article->setRevisionLogMessage('Changed to ' . ArticleDetailFetchService::STATE_FAILED);
      $article->set('moderation_state', ArticleDetailFetchService::STATE_FAILED);
      $article->save();
    }

    // Workaround, since loading value vie entity breaks everything.
    $query = $database->select('node__field_article_raw_json', 'raw');
    $query->fields('raw', ['field_article_raw_json_value'])->condition('raw.entity_id', $article->id());
    $jsonData = $query->execute()->fetchAssoc();
    $jsonData = $jsonData['field_article_raw_json_value'];
    if (@unserialize($jsonData) !== TRUE && preg_match('/^[aOs]:/', $jsonData)) {
      $jsonData = preg_replace_callback('/s\:(\d+)\:\"(.*?)\";/s', function ($matches) {
        return 's:' . strlen($matches[2]) . ':"' . $matches[2] . '";';
      }, $jsonData);
    }

    $jsonData = unserialize($jsonData);
    if (!$jsonData) {
      \Drupal::logger('ra_article')->error('Empty data in _process_article_status_cron');
      $article->setRevisionLogMessage('Changed to ' . ArticleDetailFetchService::STATE_FAILED);
      $article->set('moderation_state', ArticleDetailFetchService::STATE_FAILED);
      $article->save();
    }

    $remainingTime = $jsonData['props']['initialState']['pdp']['article']['offer']['remaining_time'];
    // Auction is finished.
    if ($article->get('field_article_scraping_attempts')->value >= 4 || $remainingTime < 0) {
      // Close article.
      $article->setRevisionLogMessage('Changed to ' . ArticleDetailFetchService::STATE_CLOSED);
      $article->set('moderation_state', ArticleDetailFetchService::STATE_CLOSED);
    }
    else {
      $article->setRevisionLogMessage('Changed to ' . ArticleDetailFetchService::STATE_OPEN);
      $article->set('moderation_state', ArticleDetailFetchService::STATE_OPEN);
      $endDate = $jsonData['props']['initialState']['pdp']['article']['offer']['end_date'];
      $article->set('field_article_end_date', str_replace('Z', '', $endDate));
    }

    $price = $jsonData['props']['initialState']['pdp']['article']['offer']['price'];
    $initialQuantity = $jsonData['props']['initialState']['pdp']['article']['offer']['initial_quantity'];
    $remainingQuantity = $jsonData['props']['initialState']['pdp']['article']['offer']['remaining_quantity'];

    $article->set('field_article_remaining_quantity', $remainingQuantity);
    $article->set('field_article_initial_quantity', $initialQuantity);
    $article->save();

    /** @var \Drupal\ra_article\ArticleSaleServiceInterface $articleSale */
    $articleSale = \Drupal::service('ra_article.sale');
    $articleSale->createSaleNode($article, $initialQuantity, $remainingQuantity, $price);

  }
}

/**
 * Delete old revisions.
 */
function _delete_old_revision() {
  $start = \Drupal::state()->get("start");
  if (!$start) {
    $start = 48500;
  }

  $database = \Drupal::database();
  $query = $database->select('node_field_data', 'n');
  $query->fields('n', ['nid'])
    ->condition('n.type', 'article')
    ->range($start, 10000);
  \Drupal::state()->set('start', $start - 10000);

  if ($start <= 0) {
    $count = $query = $database->select('node', 'n')
      ->condition('type', 'article')
      ->countQuery()->execute()->fetchField();
    \Drupal::state()->set('start', $count);
  }

  $articleNids = $query->execute()->fetchAll();

  if (empty($articleNids)) {
    return;
  }

  foreach ($articleNids as $nid) {
    $article = Node::load($nid->nid);
    if (!$article instanceof NodeInterface) {
      \Drupal::logger('ra_article')->error('No entity in _delete_old_revision');
    }

    $vids = \Drupal::service('entity_type.manager')->getStorage('node')->revisionIds($article);
    if (count($vids) <= 1) {
      continue;
    }

    foreach ($vids as $vid) {
      // Delete revision, except the loaded revision.
      if ($article->getLoadedRevisionId() != $vid) {
        try {
          \Drupal::service('entity_type.manager')->getStorage('node')->deleteRevision($vid);
        }
        catch (\Exception $e) {
          \Drupal::logger('ra_article')->error("Could not delete revision $vid of node $nid");
          \Drupal::logger('ra_article')->error($e->getMessage());
          continue;
        }
      }
    }

  }
}


