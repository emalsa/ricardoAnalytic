<?php

/**
 * @file
 * Contains ra_article.module.
 */

use Drupal\node\Entity\Node;

/**
 * Implements hook_cron().
 */
function ra_article_cron() {
  __recrawle_failed_articles();
  // __tagging_articles();
  // __fix_articles();
}

/**
 * Recrawle items which has an error after 24h.
 */
function __recrawle_failed_articles() {
  // 48h.
  $olderThan = time() - (60 * 60 * 48);
  $nids = Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->condition('field_article_has_crawling_error', '1')
    ->condition('field_article_counter_crawling', '3', '<=')
    ->condition('changed', $olderThan, '<=')
    ->accessCheck(FALSE)
    ->execute();

  /** @var  Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_service = Drupal::service('queue');
  /** @var Drupal\Core\Queue\QueueInterface $queue_item */
  $queue_item = $queue_service->get('article_queue');

  foreach ($nids as $nid) {
    $node = Node::load($nid);
    // Prevent re-add to the queue.
    $node->field_article_has_crawling_error = 0;
    $node->save();
    $data['article_id'] = $node->field_article_id->value;
    $queue_item->createItem($data);
  }
}

/**
 * Tagging processed articles.
 */
function __tagging_articles() {
  $nids = Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->condition('status', 1)
    ->condition('field_article_is_sold', 1)
    ->condition('field_article_has_tags', 0)
    ->range(0, 1000)
    ->execute();

  /** @var Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_service = Drupal::service('queue');
  /** @var Drupal\Core\Queue\QueueInterface $queue_item */
  $queue_item = $queue_service->get('article_tag_queue');

  foreach ($nids as $nid) {
    $data['nid'] = $nid;
    $queue_item->createItem($data);
  }
}
