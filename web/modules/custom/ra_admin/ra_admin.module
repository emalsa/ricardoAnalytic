<?php

/**
 * @file
 * Contains ra_admin.module.
 */

use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function ra_admin_theme() {
  return [
    'status_block' => [
      'variables' => [
        'content' => NULL,
      ],
      'render element' => 'children',
    ],
  ];
}

function _ra_admin_update_scrapedog_entities_cron() {
  // Update all scrapingdog entities and get current credits.
  /** @var \Drupal\Core\Entity\EntityStorageInterface $nodeStorage */
  $nodeStorage = \Drupal::service('entity_type.manager')->getStorage('node');

  $entityQuery = $nodeStorage->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', 'scrapingdog')
    ->condition('status', NodeInterface::PUBLISHED);
  $entitiesToCheck = $entityQuery->execute();
  /** @var \GuzzleHttp\Client $httpClient */
  $scrapedogService = \Drupal::service('ra_admin.scrapedog');
  foreach ($entitiesToCheck as $nid) {
    /** @var \Drupal\ra_admin\ScrapedogServiceInterface $scrapedogService */
    $scrapedogService->updateScrapedogRemainingCredit($nid);
  }

  // Unpublish scrapingdog nodes which have not enough credits or are expired.
  $today = date('Y-m-d', time());
  $entityQuery = $nodeStorage->getQuery();
  $entityQuery->accessCheck(FALSE)
    ->condition('type', 'scrapingdog')
    ->condition('status', NodeInterface::PUBLISHED);
  $group = $entityQuery->orConditionGroup()
    ->condition('field_scrapingdog_credits', '5', '<')
    ->condition('field_scrapingdog_expires', $today, '<=');
  $entityQuery->condition($group);
  $entitiesToDisable = $entityQuery->execute();

  foreach ($entitiesToDisable as $entityId) {
    /** @var NodeInterface $node */
    $node = $nodeStorage->load($entityId);
    $node->setUnpublished();
    $node->save();
  }
}
