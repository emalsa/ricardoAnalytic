<?php

use Drupal\Core\Entity\RevisionLogInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\ra_article\ArticleDetailFetchService;

/**
 * Implements hook_cron().
 *
 * Fetch the article detail.
 */
function ra_article_scrape_article_cron() {
  /** @var \Drupal\ra_article\ArticleDetailFetchService $articleDetailFetch */
  $articleDetailFetch = \Drupal::service('ra_article.article_detail_fetch');
  $articleNids = $articleDetailFetch->getArticleNidsToFetch();
  $articleDetailFetch->fetchArticleDetail($articleNids);
}

/**
 * Implements hook_cron().
 *
 * Fetch open article of a seller.
 */
function ra_article_scrape_seller_articles_cron() {
  /** @var \Drupal\ra_article\SellerArticlesServiceInterface $sellerArticleService */
  $sellerArticleService = \Drupal::service('ra_article.seller_articles');
  $sellerArticleService->fetchSellerArticles();
}

/**
 * Implements hook_cron().
 *
 * Fills thew queue with the open article pages.
 */
function ra_article_scrape_seller_articles_init_cron() {
  /** @var \Drupal\ra_article\SellerArticlesServiceInterface $sellerArticleService */
  $sellerArticleService = \Drupal::service('ra_article.seller_articles');
  $sellerArticleService->createSellerArticleQueue();
}

/**
 * Changes article status to scrape.
 */
function _change_article_status_cron() {
  $timestamp = strtotime('-3 days', time());
  $datetime = date('Y-m-d\Th:m:s', $timestamp);

  $database = \Drupal::database();
  $query = $database->select('node__field_article_end_date', 'ed');
  $query->fields('ed', ['entity_id'])
    ->condition('ed.field_article_end_date_value', $datetime, '<=')
    ->condition('cm.moderation_state', 'open')
    ->range(0, 10)
    ->join('content_moderation_state_field_data', 'cm', 'ed.entity_id=cm.content_entity_id');

  $articleNids = $query->execute()->fetchAll();
  if (empty($articleNids)) {
    return;
  }

  foreach ($articleNids as $nid) {
    $article = Node::load($nid->entity_id);
    $article->set('moderation_state', ArticleDetailFetchService::STATE_FOR_SCRAPE);
    if ($article instanceof RevisionLogInterface) {
      $article->setRevisionUserId(1);
      $article->setRevisionLogMessage('Changed to ' . ArticleDetailFetchService::STATE_FOR_SCRAPE);
    }
    $article->setChangedTime(time());
    $article->save();
  }
}

/**
 * Determine if article was sold or not.
 */
function _process_article_status_cron() {
  return;
  $database = \Drupal::database();
  $query = $database->select('node_field_data', 'n');
  $query->fields('n', ['nid'])
    ->condition('n.type', 'article')
    ->condition('cm.moderation_state', ArticleDetailFetchService::STATE_SUCCESSFUL_FETCH)
    ->range(1200, 200)
    ->join('content_moderation_state_field_data', 'cm', 'n.nid=cm.content_entity_id');

  $articleNids = $query->execute()->fetchAll();
  if (empty($articleNids)) {
    return;
  }

  foreach ($articleNids as $nid) {
    $article = Node::load($nid->nid);
    if (!$article instanceof NodeInterface) {

    }
    $jsonData = $article->get('field_article_raw_json')->getValue();
    if (empty($jsonData) || empty($jsonData[0]['value'])) {

    }


    $jsonData = unserialize($jsonData[0]['value']);
    $remainingTime = $jsonData['props']['initialState']['pdp']['article']['offer']['remaining_time'];
    // Auction is finished.
    if ($remainingTime < 0) {
      $initialQuantity = $jsonData['props']['initialState']['pdp']['article']['offer']['initial_quantity'];
      $remainingQuantity = $jsonData['props']['initialState']['pdp']['article']['offer']['remaining_quantity'];
      // Determine how many items has been sold.
      $soldItems = $initialQuantity - $remainingQuantity;
      if ($soldItems > 1) {

      }
    }

    if (in_array($jsonData['props']['initialState']['pdp']['article']['seller']['nickname'], ['Apost008'])) {
      continue;
    }
    $a = 1;

    //    $article->set('moderation_state', ArticleDetailFetchService::STATE_FOR_SCRAPE);
    //    if ($article instanceof RevisionLogInterface) {
    //      $article->setRevisionUserId(1);
    //      $article->setRevisionLogMessage('Changed to ' . ArticleDetailFetchService::STATE_FOR_SCRAPE);
    //    }
    //    $article->setChangedTime(time());
    //    $article->save();
  }
}


