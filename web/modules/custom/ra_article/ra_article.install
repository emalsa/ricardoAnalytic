<?php

use Drupal\Core\Database\Database;
use Drupal\node\NodeInterface;

/**
 * Implements hook_update_8000().
 *
 * Create custom "queue" table to process items without adding some bad modules.
 */
function ra_article_update_8000(&$sandbox) {
  $spec = [
    'description' => 'Custom queue table for no-auto processing',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'length' => 255,
      ],
      'nid' => [
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'length' => 255,
      ],
      'type' => [
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ],
      'data' => [
        'type' => 'blob',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'length' => 20,
      ],
    ],
    'primary key' => ['id'],
  ];
  $schema = Database::getConnection()->schema();
  if (!$schema->tableExists('queue_ricardoanalytic')) {
    $schema->createTable('queue_ricardoanalytic', $spec);
  }
}

/**
 * Implements hook_update_8001().
 *
 * Update all articles with new shop.
 */
function ra_article_update_8001(&$sandbox) {
  return;
  /** @var \Drupal\node\NodeStorage $nodeStorage */
  $nodeStorage = \Drupal::service('entity_type.manager')->getStorage('node');
  $sellerEntity = $nodeStorage->loadByProperties([
    'type' => 'seller',
    'title' => 'myeasyshop_buchs',
  ]);
  $sellerEntity = reset($sellerEntity);
  $allArticles = $nodeStorage->loadByProperties(['field_article_seller_ref' => '106595']);
  foreach ($allArticles as $article) {
    $article->set('field_article_seller_ref', $sellerEntity);
    $article->save();
  }

}

/**
 * Implements hook_update_8002().
 *
 * Update all articles with scraping attempts.
 */
function ra_article_post_update_attempts() {
  /** @var \Drupal\node\NodeStorage $nodeStorage */
  $nodeStorage = \Drupal::service('entity_type.manager')->getStorage('node');
  $entityQuery = $nodeStorage
    ->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', 'article');
  $articleNids = $entityQuery->execute();

  if (empty($articleNids)) {
    return;
  }

  foreach ($articleNids as $nid) {
    $article = $nodeStorage->load($nid);
    if ($article->get('field_article_scraping_attempts')->isEmpty()) {
      $article->set('field_article_scraping_attempts', 0);
      $article->save();
    }


  }

}
