<?php

/**
 * @file
 * Contains ra_seller.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\ra_seller\Plugin\QueueWorker\SellerArticleQueue;
use Drupal\ra_seller\Plugin\QueueWorker\SellerQueue;

/**
 * Seller article cronjob.
 */
function ra_seller_article_cron() {
  $seller_nids = _ra_seller_get_seller_nids();

  /** @var Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_service = Drupal::service('queue');
  /** @var Drupal\Core\Queue\QueueInterface $seller_article_queue */
  $seller_article_queue = $queue_service->get('seller_article_queue');

  foreach ($seller_nids as $nid) {
    $sellerNode = Node::load($nid);
    $last = \Drupal::state()->get('seller_article_last_process__' . $sellerNode->id());
    if ($last < strtotime(SellerArticleQueue::SELLER_ARTICLE_RECRAWLE_THRESHOLD)) {
      $data['nid'] = $nid;
      $seller_article_queue->createItem($data);
    }
  }
}

/**
 * Implements hook_cron().
 */
function ra_seller_cron() {
  $seller_nids = _ra_seller_get_seller_nids();

  /** @var Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_service = Drupal::service('queue');
  /** @var Drupal\Core\Queue\QueueInterface $seller_queue */
  $seller_queue = $queue_service->get('seller_queue');

  foreach ($seller_nids as $nid) {
    $sellerNode = Node::load($nid);
    if (!$sellerNode) {
      continue;
    }
    if (
      $sellerNode->get('field_seller_init_process')->value == 1 ||
      $sellerNode->getChangedTime() < strtotime(SellerQueue::SELLER_RECRAWLE_THRESHOLD)
    ) {
      $data['nid'] = $nid;
      $seller_queue->createItem($data);
    }
  }
}

/**
 * Return Seller nids.
 */
function _ra_seller_get_seller_nids() {
  return Drupal::entityQuery('node')
    ->condition('type', 'seller')
    ->condition('status', 1)
    ->execute();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ra_seller_node_presave(EntityInterface $entity) {
  if ($entity->bundle() === 'seller') {
    // The seller_id is node label.
    $entity->field_seller_id->value = $entity->label();

    if ($entity->isNew()) {
      $entity->field_seller_init_process = 1;
    }
  }
}
